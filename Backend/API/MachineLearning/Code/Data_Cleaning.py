# ============================================================
# ðŸŒ¾ Crop & Soil â€” Pre-Model Pipeline (Cleaning + EDA + Split + Scaling)
# ============================================================
# Bu dosya, model kurmadan Ã–NCE yapÄ±lmasÄ± gereken tÃ¼m adÄ±mlarÄ± iÃ§erir.
# - DosyayÄ± doÄŸru ayraÃ§ ve encoding ile okur
# - Tip/isim dÃ¼zeltmeleri + eksik deÄŸer doldurma
# - MantÄ±ksal outlier temizliÄŸi
# - Hedef sÃ¼tunu (Crop_Type) oluÅŸturma
# - Sadece gerekli kategorikler iÃ§in One-Hot Encoding
# - KeÅŸifsel Veri Analizi (EDA) gÃ¶rselleri
# - Train-Test split + sadece eÄŸitim setine fit edilen scaler
# - Temiz veriyi diske kaydetme
# ============================================================

# ---------- 0) IMPORTS ----------
import os
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# ---------- 1) VERÄ°YÄ° YÃœKLE ----------
# Orijinal ham dosya (Kaggle.csv) ; ile ayrÄ±lmÄ±ÅŸ
RAW_PATH = r"C:\Users\HUSOCAN\Desktop\Projelerim\Zekai-Masnu-Aidea\Backend\API\MachineLearning\Data\Kaggle.csv"
CLEAN_PATH = r"C:\Users\HUSOCAN\Desktop\Projelerim\Zekai-Masnu-Aidea\Backend\API\MachineLearning\Data\Crop_Soil_Final.csv"

df = pd.read_csv(RAW_PATH, encoding="ISO-8859-1", sep=";")
print(f"âœ… Ham veri yÃ¼klendi: {df.shape}")

# ---------- 2) TÄ°P DÃœZELTMELERÄ° + EKSÄ°KLER ----------
# Not: Kaggle.csv'de 'Temparature' yanlÄ±ÅŸ yazÄ±mlÄ±. DÃ¼zeltip sayÄ±ya Ã§eviriyoruz.
if "Temparature" in df.columns:
    df["Temparature"] = (
        df["Temparature"].astype(str).str.replace(",", ".", regex=False)
    )
    df["Temparature"] = pd.to_numeric(df["Temparature"], errors="coerce")
    df.rename(columns={"Temparature": "Temperature"}, inplace=True)

# Moisture da metin gelebilir â†’ sayÄ±ya Ã§evir
if "Moisture" in df.columns:
    df["Moisture"] = pd.to_numeric(
        df["Moisture"].astype(str).str.replace(",", ".", regex=False),
        errors="coerce",
    )

# Basit boÅŸluk doldurma (median)
for col in ["Temperature", "Moisture"]:
    if col in df.columns:
        df[col].fillna(df[col].median(), inplace=True)

print("ðŸ”§ Tip/eksik temizliÄŸi tamamlandÄ±.")

# ---------- 3) AYKIRI DEÄžER TEMÄ°ZLÄ°ÄžÄ° ----------
# MantÄ±ksal sÄ±nÄ±rlar: Temperature [0, 60], Humidity & Moisture [0, 100]
bounds = []
if "Temperature" in df.columns:
    bounds.append((df["Temperature"] >= 0) & (df["Temperature"] <= 60))
if "Humidity" in df.columns:
    bounds.append((df["Humidity"] >= 0) & (df["Humidity"] <= 100))
if "Moisture" in df.columns:
    bounds.append((df["Moisture"] >= 0) & (df["Moisture"] <= 100))

if bounds:
    before = len(df)
    mask = np.logical_and.reduce(bounds)
    df = df[mask].copy()
    after = len(df)
    print(f"ðŸ§¹ Outlier filtresi uygulandÄ±: {before} â†’ {after}")

# Ã–rnek: Potassium iÃ§in yÃ¼zde 5â€“95 kÄ±rpma (hafif, gÃ¼venli)
if "Potassium" in df.columns:
    low, high = df["Potassium"].quantile([0.05, 0.95])
    df["Potassium"] = df["Potassium"].clip(low, high)

# ---------- 4) HEDEF SÃœTUNU OLUÅžTUR ----------
# Ham dosyada 'Crop Type' kategorik; doÄŸrudan hedefe kopyalÄ±yoruz.
# (One-hot'tan geri birleÅŸtirme yerine daha sade ve tekrarsÄ±z.)
if "Crop Type" not in df.columns:
    raise ValueError("Beklenen 'Crop Type' kolonu bulunamadÄ±.")
df["Crop_Type"] = df["Crop Type"].astype(str)

# ---------- 5) ONE-HOT ENCODING (yalnÄ±zca Ã¶zellikler iÃ§in) ----------
# Sadece Ã¶zellik tarafÄ±ndaki kategorikleri kodlayalÄ±m:
cat_cols = [c for c in ["Soil Type", "Fertilizer Name"] if c in df.columns]
df = pd.get_dummies(df, columns=cat_cols, drop_first=True)

# ArtÄ±k eski 'Crop Type' kolonuna ihtiyacÄ±mÄ±z yok (etiket kopyalandÄ±)
df.drop(columns=["Crop Type"], inplace=True)

print(f"ðŸ§± One-Hot sonrasÄ± ÅŸekil: {df.shape}")

# ---------- 6) EDA (KeÅŸifsel Analiz) ----------
# (Grafikler Spyder'Ä±n Plots panelinde gÃ¶rÃ¼nÃ¼r)
print("\nðŸ“ˆ TanÄ±mlayÄ±cÄ± istatistikler (sayÄ±sal):")
print(df.select_dtypes(include=[np.number]).describe().T)

plt.figure(figsize=(10, 4))
sns.countplot(x="Crop_Type", data=df)
plt.title("Crop_Type DaÄŸÄ±lÄ±mÄ±")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

if "Temperature" in df.columns:
    plt.figure(figsize=(8, 4))
    sns.boxplot(x="Crop_Type", y="Temperature", data=df)
    plt.title("Temperature â€” Crop_Type bazÄ±nda daÄŸÄ±lÄ±m")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

plt.figure(figsize=(9, 7))
sns.heatmap(
    df.select_dtypes(include=[np.number]).corr(),
    cmap="coolwarm",
    annot=False,
)
plt.title("Korelasyon Matrisi (sayÄ±sal)")
plt.tight_layout()
plt.show()

# ---------- 7) TRAINâ€“TEST SPLIT ----------
TARGET_COL = "Crop_Type"
X = df.drop(columns=[TARGET_COL])
y = df[TARGET_COL]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.20, random_state=42, stratify=y
)
print(f"âœ‚ Split â†’ Train: {X_train.shape}, Test: {X_test.shape}")

# ---------- 8) FEATURE SCALING (yalnÄ±zca eÄŸitim setine fit) ----------
num_cols = X_train.select_dtypes(include=[np.number]).columns
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train[num_cols])
X_test_scaled = scaler.transform(X_test[num_cols])

print(f"âš– Scaling tamam: {len(num_cols)} sayÄ±sal sÃ¼tun Ã¶lÃ§eklendi.")

# ---------- 9) TEMÄ°Z DOSYAYI KAYDET ----------
# (Model eÄŸitiminde tekrar kullanmak istersen)
# Not: sep=';' verildi ki okurken yine ; ile okunabilsin.
df.to_csv(CLEAN_PATH, index=False, encoding="utf-8-sig", sep=";")
print(f"ðŸ’¾ Temiz veri kaydedildi â†’ {CLEAN_PATH}")

# ---------- 10) Ã–ZET ----------
print("\nâœ… Ã–N HAZIRLIK TAMAM â€” modelleme iÃ§in hazÄ±rsÄ±n.")
print("KullanÄ±ma hazÄ±r objeler: df, X_train, X_test, y_train, y_test, X_train_scaled, X_test_scaled")