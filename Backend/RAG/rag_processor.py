# rag_processor.py - GELƒ∞≈ûTƒ∞Rƒ∞LMƒ∞≈û & FIXED S√úR√úM
import os
import sys
import warnings
from pathlib import Path
from typing import List, Optional

# LangChain imports
from langchain_core.documents import Document
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings

# PDF Fallback y√ºkleyiciler - √ñNCE BUNLARI DENE
try:
    from langchain_community.document_loaders import (
        PyPDFLoader, 
        TextLoader,
        UnstructuredWordDocumentLoader
    )
    FALLBACK_LOADERS_AVAILABLE = True
except ImportError:
    FALLBACK_LOADERS_AVAILABLE = False
    print("‚ö†Ô∏è LangChain document loaders kullanƒ±lamƒ±yor")

# PyMuPDF - En g√ºvenilir PDF okuyucu
try:
    import fitz  # PyMuPDF
    PYMUPDF_AVAILABLE = True
except ImportError:
    PYMUPDF_AVAILABLE = False
    print("‚ö†Ô∏è PyMuPDF kullanƒ±lamƒ±yor")

# Geli≈ümi≈ü belge y√ºkleyiciler - EN SON DENE
try:
    from unstructured.partition.auto import partition
    UNSTRUCTURED_AVAILABLE = True
except ImportError:
    UNSTRUCTURED_AVAILABLE = False
    print("‚ö†Ô∏è unstructured.io kullanƒ±lamƒ±yor")

# Chroma import
try:
    from langchain_chroma import Chroma
    CHROMA_AVAILABLE = True
except ImportError:
    try:
        from langchain_community.vectorstores import Chroma
        CHROMA_AVAILABLE = True
    except ImportError:
        CHROMA_AVAILABLE = False
        print("‚ùå ChromaDB bulunamadƒ±!")

warnings.filterwarnings('ignore')

class RAGProcessor:
    def __init__(self, pdfs_path="PDFs", vector_store_path="vector_store"):
        self.pdfs_path = pdfs_path
        self.vector_store_path = vector_store_path
        
        if not CHROMA_AVAILABLE:
            raise ImportError("ChromaDB k√ºt√ºphanesi y√ºklenemedi!")
            
        print("üîß Embeddings modeli y√ºkleniyor...")
        self.embeddings = HuggingFaceEmbeddings(
            model_name="sentence-transformers/all-MiniLM-L6-v2"
        )
        print("‚úÖ Embeddings hazƒ±r")
        
        self.vector_store = None
        
        # Ba≈ülangƒ±√ßta vekt√∂r veritabanƒ±nƒ± y√ºkle
        self._try_load_vector_store()
        
    def _try_load_vector_store(self):
        """Vekt√∂r veritabanƒ±nƒ± y√ºklemeyi dene"""
        try:
            # Vekt√∂r store klas√∂r√ºn√º kontrol et
            if not os.path.exists(self.vector_store_path):
                print(f"‚ö†Ô∏è Vekt√∂r klas√∂r√º bulunamadƒ±: {self.vector_store_path}")
                return False
            
            # chroma.sqlite3 dosyasƒ±nƒ± kontrol et
            sqlite_file = os.path.join(self.vector_store_path, "chroma.sqlite3")
            if not os.path.exists(sqlite_file):
                print(f"‚ö†Ô∏è chroma.sqlite3 bulunamadƒ±: {sqlite_file}")
                return False
            
            print(f"üìÇ Vekt√∂r veritabanƒ± y√ºkleniyor: {self.vector_store_path}")
            
            # Chroma'yƒ± y√ºkle
            self.vector_store = Chroma(
                persist_directory=self.vector_store_path,
                embedding_function=self.embeddings
            )
            
            # Test sorgusu yaparak kontrol et
            test_results = self.vector_store.similarity_search("test", k=1)
            
            if test_results:
                print(f"‚úÖ Vekt√∂r veritabanƒ± ba≈üarƒ±yla y√ºklendi!")
                return True
            else:
                print("‚ö†Ô∏è Vekt√∂r veritabanƒ± bo≈ü g√∂r√ºn√ºyor")
                return False
                
        except Exception as e:
            print(f"‚ö†Ô∏è Vekt√∂r veritabanƒ± y√ºkleme hatasƒ±: {e}")
            self.vector_store = None
            return False
    
    def _get_all_document_files(self) -> List[Path]:
        """PDFs klas√∂r√º ve t√ºm alt klas√∂rlerindeki desteklenen dosyalarƒ± bul"""
        pdfs_path = Path(self.pdfs_path)
        
        if not pdfs_path.exists():
            print(f"‚ùå PDFs klas√∂r√º bulunamadƒ±: {self.pdfs_path}")
            return []
        
        # Desteklenen dosya uzantƒ±larƒ±
        supported_extensions = {
            '.pdf', '.doc', '.docx', '.txt', 
            '.rtf', '.odt', '.pptx', '.ppt'
        }
        
        # T√ºm alt klas√∂rleri tarayarak dosyalarƒ± bul
        document_files = []
        for ext in supported_extensions:
            files = list(pdfs_path.rglob(f"*{ext}"))
            document_files.extend(files)
        
        # Benzersiz dosya listesi
        document_files = list(set(document_files))
        document_files.sort()
        
        print(f"üîç Tarama tamamlandƒ±. {len(document_files)} dosya bulundu.")
        return document_files
    
    def _load_pdf_with_pymupdf(self, file_path: Path) -> List[Document]:
        """PyMuPDF ile PDF y√ºkleme - EN G√úVENƒ∞Lƒ∞R Y√ñNTEM"""
        if not PYMUPDF_AVAILABLE:
            return []
            
        try:
            print(f"   üìÑ PyMuPDF ile y√ºkleniyor: {file_path.name}")
            
            doc = fitz.open(file_path)
            documents = []
            
            for page_num in range(len(doc)):
                page = doc[page_num]
                text = page.get_text()
                
                if text.strip():
                    document = Document(
                        page_content=text,
                        metadata={
                            "source": str(file_path),
                            "file_name": file_path.name,
                            "file_type": ".pdf",
                            "page": page_num + 1,
                            "total_pages": len(doc),
                            "loader_type": "pymupdf"
                        }
                    )
                    documents.append(document)
            
            doc.close()
            print(f"   ‚úÖ {len(documents)} sayfa y√ºklendi (PyMuPDF)")
            return documents
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è PyMuPDF y√ºkleme hatasƒ±: {e}")
            return []
    
    def _load_document_with_langchain(self, file_path: Path) -> List[Document]:
        """LangChain y√ºkleyicileri ile belge y√ºkleme"""
        if not FALLBACK_LOADERS_AVAILABLE:
            return []
            
        try:
            file_ext = file_path.suffix.lower()
            
            if file_ext == '.pdf':
                print(f"   üìÑ LangChain PDF Loader: {file_path.name}")
                loader = PyPDFLoader(str(file_path))
            elif file_ext in ['.doc', '.docx']:
                print(f"   üìù Word Loader: {file_path.name}")
                loader = UnstructuredWordDocumentLoader(str(file_path))
            elif file_ext == '.txt':
                print(f"   üìù Text Loader: {file_path.name}")
                loader = TextLoader(str(file_path), encoding='utf-8')
            else:
                print(f"   ‚ö†Ô∏è Desteklenmeyen dosya t√ºr√º: {file_ext}")
                return []
            
            documents = loader.load()
            
            # Metadata'yi g√ºncelle
            for doc in documents:
                doc.metadata.update({
                    "source": str(file_path),
                    "file_name": file_path.name,
                    "file_type": file_ext,
                    "loader_type": "langchain"
                })
            
            print(f"   ‚úÖ {len(documents)} sayfa y√ºklendi (LangChain)")
            return documents
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è LangChain y√ºkleme hatasƒ±: {e}")
            return []
    
    def _load_document_with_unstructured(self, file_path: Path) -> List[Document]:
        """unstructured.io ile geli≈ümi≈ü belge y√ºkleme - SADECE Dƒ∞ƒûERLERƒ∞ BA≈ûARISIZ OLURSA"""
        if not UNSTRUCTURED_AVAILABLE:
            return []
            
        try:
            print(f"   üß† Unstructured.io ile deneniyor: {file_path.name}")
            
            # Unstructured i√ßin √∂zel ayarlar - poppler sorunlarƒ±nƒ± atla
            elements = partition(
                filename=str(file_path),
                strategy="fast",  # hi_res yerine fast kullan
                pdf_infer_table_structure=False,  # Tablo √ßƒ±karƒ±mƒ±nƒ± kapat
                languages=["eng"],  # Dil belirt
            )
            
            documents = []
            for i, element in enumerate(elements):
                content = element.text.strip()
                if content:
                    doc = Document(
                        page_content=content,
                        metadata={
                            "source": str(file_path),
                            "file_name": file_path.name,
                            "file_type": file_path.suffix,
                            "element_type": type(element).__name__,
                            "element_index": i,
                            "loader_type": "unstructured"
                        }
                    )
                    documents.append(doc)
            
            print(f"   ‚úÖ {len(documents)} element √ßƒ±karƒ±ldƒ± (Unstructured)")
            return documents
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Unstructured.io hatasƒ±: {e}")
            return []
    
    def _load_single_document(self, file_path: Path) -> List[Document]:
        """
        Tek bir belgeyi y√ºkle
        √ñNCELIK SIRASI:
        1. PyMuPDF (PDF i√ßin en g√ºvenilir)
        2. LangChain Loaders
        3. Unstructured.io (son √ßare)
        """
        print(f"üìñ Y√ºkleniyor: {file_path.name}")
        
        file_ext = file_path.suffix.lower()
        
        # PDF i√ßin √∂nce PyMuPDF dene
        if file_ext == '.pdf' and PYMUPDF_AVAILABLE:
            documents = self._load_pdf_with_pymupdf(file_path)
            if documents:
                return documents
            print(f"   ‚ö†Ô∏è PyMuPDF ba≈üarƒ±sƒ±z, alternatif y√∂ntem deneniyor...")
        
        # LangChain y√ºkleyicileri
        if FALLBACK_LOADERS_AVAILABLE:
            documents = self._load_document_with_langchain(file_path)
            if documents:
                return documents
            print(f"   ‚ö†Ô∏è LangChain ba≈üarƒ±sƒ±z, son y√∂ntem deneniyor...")
        
        # Son √ßare: Unstructured.io
        if UNSTRUCTURED_AVAILABLE:
            documents = self._load_document_with_unstructured(file_path)
            if documents:
                return documents
        
        print(f"   ‚ùå Hi√ßbir y√∂ntemle y√ºklenemedi: {file_path.name}")
        return []
    
    def load_and_process_documents(self):
        """T√ºm belgeleri y√ºkle ve i≈üle"""
        if not CHROMA_AVAILABLE:
            print("‚ùå Chroma kullanƒ±lamadƒ±ƒüƒ± i√ßin belge i≈ülenemiyor")
            return False
        
        # T√ºm belge dosyalarƒ±nƒ± bul
        document_files = self._get_all_document_files()
        if not document_files:
            print("‚ùå ƒ∞≈ülenecek dosya bulunamadƒ±!")
            return False
        
        print(f"üìö {len(document_files)} dosya i≈ülenecek:")
        for i, file_path in enumerate(document_files, 1):
            print(f"  {i}. {file_path.name}")
        
        # T√ºm belgeleri y√ºkle
        all_documents = []
        successful_files = 0
        failed_files = 0
        
        for file_path in document_files:
            documents = self._load_single_document(file_path)
            if documents:
                all_documents.extend(documents)
                successful_files += 1
            else:
                failed_files += 1
        
        print(f"\nüìä Y√ºkleme √ñzeti:")
        print(f"  ‚úÖ Ba≈üarƒ±lƒ±: {successful_files} dosya")
        print(f"  ‚ùå Ba≈üarƒ±sƒ±z: {failed_files} dosya")
        print(f"  üìÑ Toplam: {len(all_documents)} dok√ºman elementi")
        
        if not all_documents:
            print("‚ùå Hi√ß dok√ºman y√ºklenemedi!")
            return False
        
        # Metinleri b√∂l
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200
        )
        chunks = text_splitter.split_documents(all_documents)
        print(f"‚úÇÔ∏è {len(chunks)} metin par√ßasƒ± olu≈üturuldu")
        
        # ChromaDB ile vekt√∂r veritabanƒ± olu≈ütur
        print("üîß Vekt√∂r veritabanƒ± olu≈üturuluyor...")
        try:
            self.vector_store = Chroma.from_documents(
                documents=chunks,
                embedding=self.embeddings,
                persist_directory=self.vector_store_path
            )
            print("‚úÖ Vekt√∂r veritabanƒ± olu≈üturuldu!")
            return True
        except Exception as e:
            print(f"‚ùå Vekt√∂r veritabanƒ± olu≈üturulamadƒ±: {e}")
            import traceback
            traceback.print_exc()
            return False
        
    def search_similar(self, query, k=3):
        """Benzer dok√ºmanlarƒ± ara"""
        if not CHROMA_AVAILABLE:
            print("‚ùå Chroma kullanƒ±lamƒ±yor!")
            return []
        
        # Vekt√∂r store yoksa y√ºklemeyi dene
        if self.vector_store is None:
            print("üîÑ Vekt√∂r veritabanƒ± yeniden y√ºkleniyor...")
            success = self._try_load_vector_store()
            
            if not success:
                print("‚ùå Vekt√∂r veritabanƒ± y√ºklenemedi. Belgeleri i≈ülemeniz gerekiyor.")
                return []
        
        try:
            print(f"üîç Arama yapƒ±lƒ±yor: '{query}'")
            results = self.vector_store.similarity_search(query, k=k)
            print(f"‚úÖ {len(results)} sonu√ß bulundu")
            return results
        except Exception as e:
            print(f"‚ùå Arama hatasƒ±: {e}")
            import traceback
            traceback.print_exc()
            return []

def print_system_info():
    """Sistem bilgilerini yazdƒ±r"""
    print("=" * 60)
    print("üîç SISTEM Bƒ∞LGƒ∞LERƒ∞")
    print("=" * 60)
    print(f"Python Version: {sys.version}")
    print(f"PyMuPDF Available: {PYMUPDF_AVAILABLE}")
    print(f"LangChain Loaders Available: {FALLBACK_LOADERS_AVAILABLE}")
    print(f"Unstructured Available: {UNSTRUCTURED_AVAILABLE}")
    print(f"Chroma Available: {CHROMA_AVAILABLE}")
    print("=" * 60)
    print()
        
def main():
    """RAG Processor test fonksiyonu"""
    print_system_info()
    
    print("üß™ RAG Processor Test Ediliyor...")
    
    # Processor'ƒ± ba≈ülat
    processor = RAGProcessor()
    
    # Vekt√∂r veritabanƒ± var mƒ± kontrol et
    if processor.vector_store is None:
        print("üìö Vekt√∂r veritabanƒ± yok, PDF'ler i≈üleniyor...")
        success = processor.load_and_process_documents()
        if success:
            print("‚úÖ PDF'ler ba≈üarƒ±yla i≈ülendi!")
        else:
            print("‚ùå PDF i≈üleme ba≈üarƒ±sƒ±z!")
    else:
        print("‚úÖ Vekt√∂r veritabanƒ± zaten y√ºkl√º!")
    
    # Test aramasƒ± yap
    print("\nüîç Test aramasƒ± yapƒ±lƒ±yor...")
    results = processor.search_similar("organik tarƒ±m", k=2)
    print(f"üìä {len(results)} sonu√ß bulundu")
    
    if results:
        print("\nüìÑ ƒ∞lk Sonu√ß:")
        print(f"Kaynak: {results[0].metadata.get('file_name', 'Bilinmiyor')}")
        print(f"ƒ∞√ßerik √∂nizleme: {results[0].page_content[:200]}...")

if __name__ == "__main__":
    main()