from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, WebDriverException
import pandas as pd
import time
import random

class ImprovedMgmScraper:
    def __init__(self):
        self.setup_driver()
        self.base_url = "https://www.mgm.gov.tr/veridegerlendirme/il-ve-ilceler-istatistik.aspx?k=H"
        
    def setup_driver(self):
        """Driver'ƒ± daha g√ºvenli ≈üekilde kur"""
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-images")
        chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])
        
        # Ek stabilite ayarlarƒ±
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_argument("--disable-web-security")
        
        try:
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.set_page_load_timeout(30)  # Daha uzun timeout
            self.wait = WebDriverWait(self.driver, 15)
        except Exception as e:
            print(f"Driver ba≈ülatƒ±lƒ±rken hata: {e}")
            raise
    
    def restart_driver(self):
        """Driver'ƒ± yeniden ba≈ülat"""
        print("Driver yeniden ba≈ülatƒ±lƒ±yor...")
        try:
            self.driver.quit()
        except:
            pass
        time.sleep(3)  # Daha uzun bekleme
        self.setup_driver()
    
    def get_city_links(self):
        """T√ºm ≈üehir linklerini al"""
        print("≈ûehir linkleri alƒ±nƒ±yor...")
        max_retries = 3
        
        for attempt in range(max_retries):
            try:
                self.driver.get(self.base_url)
                
                city_div = self.wait.until(
                    EC.presence_of_element_located((By.CLASS_NAME, "kk_div1"))
                )
                
                city_links = []
                links = city_div.find_elements(By.TAG_NAME, "a")
                
                for link in links:
                    city_name = link.text.strip()
                    if city_name:
                        city_url = link.get_attribute("href")
                        if city_url and city_url.startswith("?"):
                            city_url = "https://www.mgm.gov.tr/veridegerlendirme/il-ve-ilceler-istatistik.aspx" + city_url
                        city_links.append((city_name, city_url))
                
                print(f"{len(city_links)} ≈üehir bulundu")
                return city_links
                
            except Exception as e:
                print(f"≈ûehir linkleri alƒ±nƒ±rken hata (deneme {attempt + 1}/{max_retries}): {e}")
                if attempt < max_retries - 1:
                    self.restart_driver()
                else:
                    raise
    
    def scrape_city_data(self, city_name, city_url):
        """Bir ≈üehrin verilerini scrape et - GELƒ∞≈ûTƒ∞Rƒ∞LMƒ∞≈û"""
        max_retries = 2
        
        for attempt in range(max_retries):
            try:
                print(f"{city_name} verileri alƒ±nƒ±yor... (deneme {attempt + 1})")
                
                # Exponential backoff - her denemede daha fazla bekle
                wait_time = random.uniform(2, 4) * (attempt + 1)
                time.sleep(wait_time)
                
                # Sayfayƒ± y√ºkle
                self.driver.get(city_url)
                
                # Sayfanƒ±n tamamen y√ºklendiƒüini doƒürula
                WebDriverWait(self.driver, 10).until(
                    lambda d: d.execute_script('return document.readyState') == 'complete'
                )
                
                # Tablonun y√ºklenmesini bekle - daha uzun timeout
                try:
                    table = WebDriverWait(self.driver, 40).until(
                        EC.presence_of_element_located((By.TAG_NAME, "table"))
                    )
                except TimeoutException:
                    # Tablo yoksa, sayfada "veri yok" mesajƒ± var mƒ± kontrol et
                    page_text = self.driver.page_source.lower()
                    if "veri" in page_text or "yok" in page_text or len(self.driver.find_elements(By.TAG_NAME, "table")) == 0:
                        print(f"‚ö†Ô∏è {city_name} i√ßin MGM'de veri bulunmuyor - ATLANACAK")
                        return "NO_DATA"  # √ñzel i≈üaret
                    raise
                
                # Tablonun i√ßeriƒüinin y√ºklendiƒüini doƒürula
                WebDriverWait(self.driver, 10).until(
                    lambda d: len(d.find_elements(By.TAG_NAME, "tr")) > 1
                )
                
                # Verileri topla
                city_data = {"≈ûehir": city_name}
                
                rows = table.find_elements(By.TAG_NAME, "tr")
                
                for row in rows:
                    header_cells = row.find_elements(By.TAG_NAME, "th")
                    if len(header_cells) > 0:
                        parameter = header_cells[0].text.strip()
                        if parameter and parameter != city_name:
                            
                            data_cells = row.find_elements(By.TAG_NAME, "td")
                            
                            for i, cell in enumerate(data_cells):
                                month = self.get_month_name(i)
                                if month:
                                    cell_id = f"{parameter}_{month}"
                                    value = cell.text.strip()
                                    city_data[cell_id] = value
                
                print(f"{city_name} verileri ba≈üarƒ±yla alƒ±ndƒ±")
                return city_data
                
            except TimeoutException:
                print(f"‚è±Ô∏è {city_name} i√ßin zaman a≈üƒ±mƒ± (deneme {attempt + 1})")
                if attempt < max_retries - 1:
                    # Driver'ƒ± yeniden ba≈ülat ve tekrar dene
                    self.restart_driver()
                    continue
                else:
                    print(f"‚ö†Ô∏è {city_name} i√ßin t√ºm denemeler ba≈üarƒ±sƒ±z")
                    return None
                    
            except WebDriverException as e:
                print(f"üîß {city_name} i√ßin WebDriver hatasƒ± (deneme {attempt + 1})")
                if attempt < max_retries - 1:
                    self.restart_driver()
                    continue
                else:
                    return None
                    
            except Exception as e:
                print(f"‚ùå {city_name} i√ßin beklenmeyen hata (deneme {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    continue
                else:
                    return None
        
        return None
    
    def get_month_name(self, index):
        """Ay indeksini ay ismine √ßevir"""
        months = [
            "Ocak", "≈ûubat", "Mart", "Nisan", "Mayƒ±s", "Haziran",
            "Temmuz", "Aƒüustos", "Eyl√ºl", "Ekim", "Kasƒ±m", "Aralƒ±k", "Yƒ±llƒ±k"
        ]
        return months[index] if index < len(months) else None
    
    def scrape_all_cities(self):
        """T√úM ≈üehirleri scrape et - BA≈ûARISIZLARI TEKRAR DENE"""
        city_links = self.get_city_links()
        all_data = []
        failed_cities = []
        no_data_cities = []  # Veri olmayan ≈üehirler
        
        total_cities = len(city_links)
        successful = 0
        
        print(f"üöÄ T√úM ≈ûEHƒ∞RLER ƒ∞≈ûLENƒ∞YOR: {total_cities} ≈üehir")
        
        # ƒ∞LK TUR
        for i, (city_name, city_url) in enumerate(city_links, 1):
            print(f"\n[{i}/{total_cities}] ƒ∞≈üleniyor: {city_name}")
            
            city_data = self.scrape_city_data(city_name, city_url)
            if city_data == "NO_DATA":
                no_data_cities.append(city_name)
                print(f"‚ö†Ô∏è {city_name} - VERƒ∞ YOK (normal)")
            elif city_data:
                all_data.append(city_data)
                successful += 1
                print(f"‚úÖ {city_name} - BA≈ûARILI")
            else:
                failed_cities.append((city_name, city_url))
                print(f"‚ùå {city_name} - BA≈ûARISIZ (tekrar denenecek)")
            
            # Her 10 ≈üehirden sonra driver'ƒ± yeniden ba≈ülat
            if i % 10 == 0 and i < total_cities:
                print(f"üîÑ {i}. ≈üehirden sonra driver yeniden ba≈ülatƒ±lƒ±yor...")
                self.restart_driver()
                
            # ƒ∞lerleme durumunu g√∂ster
            if i % 5 == 0:
                progress = (i / total_cities) * 100
                failed = len(failed_cities)
                print(f"üìä ƒ∞lerleme: {i}/{total_cities} ({progress:.1f}%) - Ba≈üarƒ±lƒ±: {successful}, Ba≈üarƒ±sƒ±z: {failed}, Veri Yok: {len(no_data_cities)}")
        
        # ƒ∞Kƒ∞NCƒ∞ TUR - BA≈ûARISIZ ≈ûEHƒ∞RLERƒ∞ TEKRAR DENE
        if failed_cities:
            print(f"\n{'='*60}")
            print(f"üîÑ ƒ∞Kƒ∞NCƒ∞ TUR: {len(failed_cities)} ba≈üarƒ±sƒ±z ≈üehir tekrar deneniyor...")
            print(f"{'='*60}\n")
            
            self.restart_driver()
            time.sleep(5)
            
            retry_failed = []
            for idx, (city_name, city_url) in enumerate(failed_cities, 1):
                print(f"\n[Tekrar {idx}/{len(failed_cities)}] ƒ∞≈üleniyor: {city_name}")
                
                city_data = self.scrape_city_data(city_name, city_url)
                if city_data == "NO_DATA":
                    no_data_cities.append(city_name)
                    print(f"‚ö†Ô∏è {city_name} - VERƒ∞ YOK (ikinci denemede anla≈üƒ±ldƒ±)")
                elif city_data:
                    all_data.append(city_data)
                    successful += 1
                    print(f"‚úÖ {city_name} - ƒ∞Kƒ∞NCƒ∞ DENEMEDE BA≈ûARILI!")
                else:
                    retry_failed.append((city_name, city_url))
                    print(f"‚ùå {city_name} - Yƒ∞NE BA≈ûARISIZ")
                
                # Ba≈üarƒ±sƒ±z ≈üehirler arasƒ±nda da driver'ƒ± yenile
                if idx % 5 == 0 and idx < len(failed_cities):
                    self.restart_driver()
                    time.sleep(3)
            
            failed_cities = retry_failed
        
        # SONU√á RAPORU
        print(f"\n{'='*60}")
        print(f"üéâ T√úM ≈ûEHƒ∞RLER TAMAMLANDI!")
        print(f"{'='*60}")
        print(f"üìä Toplam: {total_cities} ≈üehir")
        print(f"‚úÖ Ba≈üarƒ±lƒ±: {successful} ≈üehir")
        print(f"‚ö†Ô∏è Veri Yok: {len(no_data_cities)} ≈üehir")
        print(f"‚ùå Ba≈üarƒ±sƒ±z: {len(failed_cities)} ≈üehir")
        
        actual_total = total_cities - len(no_data_cities)
        if actual_total > 0:
            print(f"üìà Ba≈üarƒ± Oranƒ± (veri olan ≈üehirler): {(successful/actual_total)*100:.1f}%")
        
        if no_data_cities:
            print(f"\n‚ö†Ô∏è Veri olmayan ≈üehirler (MGM'de kayƒ±t yok):")
            for city_name in no_data_cities:
                print(f"   - {city_name}")
        
        if failed_cities:
            print(f"\n‚ùå Ba≈üarƒ±sƒ±z ≈üehirler:")
            for city_name, _ in failed_cities:
                print(f"   - {city_name}")
            
            # Ba≈üarƒ±sƒ±z ≈üehirleri dosyaya kaydet
            pd.DataFrame(failed_cities, columns=['≈ûehir', 'URL']).to_csv(
                'basarisiz_sehirler.csv', index=False, encoding='utf-8-sig'
            )
            print(f"\nüíæ Ba≈üarƒ±sƒ±z ≈üehirler 'basarisiz_sehirler.csv' dosyasƒ±na kaydedildi")
        else:
            print(f"\nüéä VERƒ∞Sƒ∞ OLAN T√úM ≈ûEHƒ∞RLER %100 BA≈ûARIYLA TAMAMLANDI!")
        
        return all_data
    
    def save_to_csv(self, data, filename="mgm_iklim_verileri.csv"):
        """Verileri CSV dosyasƒ±na kaydet"""
        if not data:
            print("Kaydedilecek veri bulunamadƒ±!")
            return
        
        df = pd.DataFrame(data)
        
        columns = ["≈ûehir"] + [col for col in df.columns if col != "≈ûehir"]
        df = df[columns]
        
        df.to_csv(filename, index=False, encoding='utf-8-sig')
        print(f"‚úÖ Veriler {filename} dosyasƒ±na kaydedildi")
        print(f"üìä Toplam {len(data)} ≈üehrin verisi kaydedildi")
        
        return df
    
    def close(self):
        """Driver'ƒ± kapat"""
        try:
            self.driver.quit()
            print("Driver kapatƒ±ldƒ±")
        except:
            pass

def main():
    scraper = ImprovedMgmScraper()
    
    try:
        print("üöÄ T√úM ≈ûEHƒ∞RLER ALINIYOR...")
        all_data = scraper.scrape_all_cities()
        
        if all_data:
            df = scraper.save_to_csv(all_data)
            print("\nüìã ƒ∞lk 5 satƒ±r √∂nizleme:")
            print(df.head())
            print(f"\nüìÅ Dosya boyutu: {len(df)} satƒ±r, {len(df.columns)} s√ºtun")
        else:
            print("‚ùå Hi√ß veri alƒ±namadƒ±!")
        
    except Exception as e:
        print(f"‚ùå Scraping sƒ±rasƒ±nda hata olu≈ütu: {str(e)}")
    
    finally:
        scraper.close()

if __name__ == "__main__":
    main()